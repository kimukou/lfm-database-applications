# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lfmutilpy', [dirname(__file__)])
        except ImportError:
            import _lfmutilpy
            return _lfmutilpy
        if fp is not None:
            try:
                _mod = imp.load_module('_lfmutilpy', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _lfmutilpy = swig_import_helper()
    del swig_import_helper
else:
    import _lfmutilpy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def alloc_int(*args):
  return _lfmutilpy.alloc_int(*args)
alloc_int = _lfmutilpy.alloc_int

def alloc_double(*args):
  return _lfmutilpy.alloc_double(*args)
alloc_double = _lfmutilpy.alloc_double

def alloc_void(*args):
  return _lfmutilpy.alloc_void(*args)
alloc_void = _lfmutilpy.alloc_void

def alloc_char(*args):
  return _lfmutilpy.alloc_char(*args)
alloc_char = _lfmutilpy.alloc_char

def alloc_numeric(*args):
  return _lfmutilpy.alloc_numeric(*args)
alloc_numeric = _lfmutilpy.alloc_numeric

def free_ptr(*args):
  return _lfmutilpy.free_ptr(*args)
free_ptr = _lfmutilpy.free_ptr

def free_iptr(*args):
  return _lfmutilpy.free_iptr(*args)
free_iptr = _lfmutilpy.free_iptr

def free_dptr(*args):
  return _lfmutilpy.free_dptr(*args)
free_dptr = _lfmutilpy.free_dptr

def free_cptr(*args):
  return _lfmutilpy.free_cptr(*args)
free_cptr = _lfmutilpy.free_cptr

def free_vptr(*args):
  return _lfmutilpy.free_vptr(*args)
free_vptr = _lfmutilpy.free_vptr

def int_at(*args):
  return _lfmutilpy.int_at(*args)
int_at = _lfmutilpy.int_at

def dbl_at(*args):
  return _lfmutilpy.dbl_at(*args)
dbl_at = _lfmutilpy.dbl_at

def numeric_at(*args):
  return _lfmutilpy.numeric_at(*args)
numeric_at = _lfmutilpy.numeric_at

def put_int_at(*args):
  return _lfmutilpy.put_int_at(*args)
put_int_at = _lfmutilpy.put_int_at

def put_dbl_at(*args):
  return _lfmutilpy.put_dbl_at(*args)
put_dbl_at = _lfmutilpy.put_dbl_at

def put_numeric_at(*args):
  return _lfmutilpy.put_numeric_at(*args)
put_numeric_at = _lfmutilpy.put_numeric_at
class CPTR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPTR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPTR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vptr"] = _lfmutilpy.CPTR_vptr_set
    __swig_getmethods__["vptr"] = _lfmutilpy.CPTR_vptr_get
    if _newclass:vptr = _swig_property(_lfmutilpy.CPTR_vptr_get, _lfmutilpy.CPTR_vptr_set)
    __swig_setmethods__["iptr"] = _lfmutilpy.CPTR_iptr_set
    __swig_getmethods__["iptr"] = _lfmutilpy.CPTR_iptr_get
    if _newclass:iptr = _swig_property(_lfmutilpy.CPTR_iptr_get, _lfmutilpy.CPTR_iptr_set)
    __swig_setmethods__["dptr"] = _lfmutilpy.CPTR_dptr_set
    __swig_getmethods__["dptr"] = _lfmutilpy.CPTR_dptr_get
    if _newclass:dptr = _swig_property(_lfmutilpy.CPTR_dptr_get, _lfmutilpy.CPTR_dptr_set)
    __swig_setmethods__["cptr"] = _lfmutilpy.CPTR_cptr_set
    __swig_getmethods__["cptr"] = _lfmutilpy.CPTR_cptr_get
    if _newclass:cptr = _swig_property(_lfmutilpy.CPTR_cptr_get, _lfmutilpy.CPTR_cptr_set)
    __swig_setmethods__["sptr"] = _lfmutilpy.CPTR_sptr_set
    __swig_getmethods__["sptr"] = _lfmutilpy.CPTR_sptr_get
    if _newclass:sptr = _swig_property(_lfmutilpy.CPTR_sptr_get, _lfmutilpy.CPTR_sptr_set)
    __swig_setmethods__["nptr"] = _lfmutilpy.CPTR_nptr_set
    __swig_getmethods__["nptr"] = _lfmutilpy.CPTR_nptr_get
    if _newclass:nptr = _swig_property(_lfmutilpy.CPTR_nptr_get, _lfmutilpy.CPTR_nptr_set)
    def __init__(self): 
        this = _lfmutilpy.new_CPTR()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CPTR
    __del__ = lambda self : None;
CPTR_swigregister = _lfmutilpy.CPTR_swigregister
CPTR_swigregister(CPTR)

class CType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CType, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _lfmutilpy.delete_CType
    __del__ = lambda self : None;
    __swig_setmethods__["cPtr"] = _lfmutilpy.CType_cPtr_set
    __swig_getmethods__["cPtr"] = _lfmutilpy.CType_cPtr_get
    if _newclass:cPtr = _swig_property(_lfmutilpy.CType_cPtr_get, _lfmutilpy.CType_cPtr_set)
    def alloc_buf(self, *args): return _lfmutilpy.CType_alloc_buf(self, *args)
    def free_buf(self): return _lfmutilpy.CType_free_buf(self)
CType_swigregister = _lfmutilpy.CType_swigregister
CType_swigregister(CType)

class CTypeIntAr(CType):
    __swig_setmethods__ = {}
    for _s in [CType]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTypeIntAr, name, value)
    __swig_getmethods__ = {}
    for _s in [CType]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTypeIntAr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CTypeIntAr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CTypeIntAr
    __del__ = lambda self : None;
    def alloc_buf(self, *args): return _lfmutilpy.CTypeIntAr_alloc_buf(self, *args)
    def at(self, *args): return _lfmutilpy.CTypeIntAr_at(self, *args)
    def put(self, *args): return _lfmutilpy.CTypeIntAr_put(self, *args)
    def getPtr(self): return _lfmutilpy.CTypeIntAr_getPtr(self)
    def getVPtr(self): return _lfmutilpy.CTypeIntAr_getVPtr(self)
CTypeIntAr_swigregister = _lfmutilpy.CTypeIntAr_swigregister
CTypeIntAr_swigregister(CTypeIntAr)

class CTypeDblAr(CType):
    __swig_setmethods__ = {}
    for _s in [CType]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTypeDblAr, name, value)
    __swig_getmethods__ = {}
    for _s in [CType]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTypeDblAr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CTypeDblAr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CTypeDblAr
    __del__ = lambda self : None;
    def alloc_buf(self, *args): return _lfmutilpy.CTypeDblAr_alloc_buf(self, *args)
    def at(self, *args): return _lfmutilpy.CTypeDblAr_at(self, *args)
    def put(self, *args): return _lfmutilpy.CTypeDblAr_put(self, *args)
    def getPtr(self): return _lfmutilpy.CTypeDblAr_getPtr(self)
    def getVPtr(self): return _lfmutilpy.CTypeDblAr_getVPtr(self)
CTypeDblAr_swigregister = _lfmutilpy.CTypeDblAr_swigregister
CTypeDblAr_swigregister(CTypeDblAr)

class CTypeCharAr(CType):
    __swig_setmethods__ = {}
    for _s in [CType]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTypeCharAr, name, value)
    __swig_getmethods__ = {}
    for _s in [CType]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTypeCharAr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CTypeCharAr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CTypeCharAr
    __del__ = lambda self : None;
    def alloc_buf(self, *args): return _lfmutilpy.CTypeCharAr_alloc_buf(self, *args)
    def at(self, *args): return _lfmutilpy.CTypeCharAr_at(self, *args)
    def put(self, *args): return _lfmutilpy.CTypeCharAr_put(self, *args)
    def setStr(self, *args): return _lfmutilpy.CTypeCharAr_setStr(self, *args)
    def getPtr(self, *args): return _lfmutilpy.CTypeCharAr_getPtr(self, *args)
    def getStr(self, *args): return _lfmutilpy.CTypeCharAr_getStr(self, *args)
    def getVPtr(self): return _lfmutilpy.CTypeCharAr_getVPtr(self)
CTypeCharAr_swigregister = _lfmutilpy.CTypeCharAr_swigregister
CTypeCharAr_swigregister(CTypeCharAr)

class CTypeStrAr(CType):
    __swig_setmethods__ = {}
    for _s in [CType]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTypeStrAr, name, value)
    __swig_getmethods__ = {}
    for _s in [CType]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTypeStrAr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CTypeStrAr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CTypeStrAr
    __del__ = lambda self : None;
    def alloc_buf(self, *args): return _lfmutilpy.CTypeStrAr_alloc_buf(self, *args)
    def at(self, *args): return _lfmutilpy.CTypeStrAr_at(self, *args)
    def put(self, *args): return _lfmutilpy.CTypeStrAr_put(self, *args)
    def getVPtr(self): return _lfmutilpy.CTypeStrAr_getVPtr(self)
CTypeStrAr_swigregister = _lfmutilpy.CTypeStrAr_swigregister
CTypeStrAr_swigregister(CTypeStrAr)

class CTypeNumAr(CType):
    __swig_setmethods__ = {}
    for _s in [CType]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTypeNumAr, name, value)
    __swig_getmethods__ = {}
    for _s in [CType]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTypeNumAr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CTypeNumAr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CTypeNumAr
    __del__ = lambda self : None;
    def alloc_buf(self, *args): return _lfmutilpy.CTypeNumAr_alloc_buf(self, *args)
    def at(self, *args): return _lfmutilpy.CTypeNumAr_at(self, *args)
    def put(self, *args): return _lfmutilpy.CTypeNumAr_put(self, *args)
    def getPtr(self): return _lfmutilpy.CTypeNumAr_getPtr(self)
    def getVPtr(self): return _lfmutilpy.CTypeNumAr_getVPtr(self)
CTypeNumAr_swigregister = _lfmutilpy.CTypeNumAr_swigregister
CTypeNumAr_swigregister(CTypeNumAr)

class CNumericInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNumericInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNumericInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CNumericInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CNumericInfo
    __del__ = lambda self : None;
    def getScale(self): return _lfmutilpy.CNumericInfo_getScale(self)
    def getRoundingMode(self): return _lfmutilpy.CNumericInfo_getRoundingMode(self)
    def setScale(self, *args): return _lfmutilpy.CNumericInfo_setScale(self, *args)
    def setRoundingMode(self, *args): return _lfmutilpy.CNumericInfo_setRoundingMode(self, *args)
    def getPtr(self): return _lfmutilpy.CNumericInfo_getPtr(self)
CNumericInfo_swigregister = _lfmutilpy.CNumericInfo_swigregister
CNumericInfo_swigregister(CNumericInfo)

class CNumeric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNumeric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNumeric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CNumeric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CNumeric
    __del__ = lambda self : None;
    def value(self): return _lfmutilpy.CNumeric_value(self)
    def getPtr(self): return _lfmutilpy.CNumeric_getPtr(self)
CNumeric_swigregister = _lfmutilpy.CNumeric_swigregister
CNumeric_swigregister(CNumeric)

class CNumericInfoData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNumericInfoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNumericInfoData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lfmutilpy.new_CNumericInfoData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CNumericInfoData
    __del__ = lambda self : None;
    def put(self, *args): return _lfmutilpy.CNumericInfoData_put(self, *args)
    def toString(self): return _lfmutilpy.CNumericInfoData_toString(self)
    def getPtr(self): return _lfmutilpy.CNumericInfoData_getPtr(self)
    def getNPtr(self): return _lfmutilpy.CNumericInfoData_getNPtr(self)
    def getScale(self): return _lfmutilpy.CNumericInfoData_getScale(self)
    def getRoundingMode(self): return _lfmutilpy.CNumericInfoData_getRoundingMode(self)
CNumericInfoData_swigregister = _lfmutilpy.CNumericInfoData_swigregister
CNumericInfoData_swigregister(CNumericInfoData)

class CFilterAttr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFilterAttr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFilterAttr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _lfmutilpy.new_CFilterAttr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CFilterAttr
    __del__ = lambda self : None;
    def getAttr(self, *args): return _lfmutilpy.CFilterAttr_getAttr(self, *args)
    def setAttr(self, *args): return _lfmutilpy.CFilterAttr_setAttr(self, *args)
    def at(self, *args): return _lfmutilpy.CFilterAttr_at(self, *args)
    def put(self, *args): return _lfmutilpy.CFilterAttr_put(self, *args)
CFilterAttr_swigregister = _lfmutilpy.CFilterAttr_swigregister
CFilterAttr_swigregister(CFilterAttr)

class CSubsetAttr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSubsetAttr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSubsetAttr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _lfmutilpy.new_CSubsetAttr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmutilpy.delete_CSubsetAttr
    __del__ = lambda self : None;
    def getAttr(self, *args): return _lfmutilpy.CSubsetAttr_getAttr(self, *args)
    def setAttr(self, *args): return _lfmutilpy.CSubsetAttr_setAttr(self, *args)
    def at(self, *args): return _lfmutilpy.CSubsetAttr_at(self, *args)
    def put(self, *args): return _lfmutilpy.CSubsetAttr_put(self, *args)
CSubsetAttr_swigregister = _lfmutilpy.CSubsetAttr_swigregister
CSubsetAttr_swigregister(CSubsetAttr)



