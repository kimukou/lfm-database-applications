# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lfmtblpy', [dirname(__file__)])
        except ImportError:
            import _lfmtblpy
            return _lfmtblpy
        if fp is not None:
            try:
                _mod = imp.load_module('_lfmtblpy', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _lfmtblpy = swig_import_helper()
    del swig_import_helper
else:
    import _lfmtblpy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


D5_VERSION_SIZE = _lfmtblpy.D5_VERSION_SIZE
D5_VERSION_STRING_SIZE = _lfmtblpy.D5_VERSION_STRING_SIZE
D5_MAX_PATH = _lfmtblpy.D5_MAX_PATH
D5_MAX_STRING_LENGTH_OS = _lfmtblpy.D5_MAX_STRING_LENGTH_OS
RD5_MAX_CATSIZE = _lfmtblpy.RD5_MAX_CATSIZE
D5_LICENSE_DATE_SIZE = _lfmtblpy.D5_LICENSE_DATE_SIZE
D5_MAX_STRING_SIZE = _lfmtblpy.D5_MAX_STRING_SIZE
D5_MAX_TEXT_SIZE = _lfmtblpy.D5_MAX_TEXT_SIZE
D5_MAX_NAME_LENGTH = _lfmtblpy.D5_MAX_NAME_LENGTH
D5_MAX_JOIN_KEY = _lfmtblpy.D5_MAX_JOIN_KEY
D5_MAX_COMBINE = _lfmtblpy.D5_MAX_COMBINE
D5_MAX_SET_COUNT = _lfmtblpy.D5_MAX_SET_COUNT
D5_MAX_FILTER_COUNT_REAL = _lfmtblpy.D5_MAX_FILTER_COUNT_REAL
D5_MAX_FILTER_COUNT_JOIN = _lfmtblpy.D5_MAX_FILTER_COUNT_JOIN
D5_MAX_FILTER_COUNT = _lfmtblpy.D5_MAX_FILTER_COUNT
D5_MAX_TABLE_COUNT = _lfmtblpy.D5_MAX_TABLE_COUNT
D5_SHORT_STRING_SZ = _lfmtblpy.D5_SHORT_STRING_SZ
D5_MAX_LONG_STRING_SIZE = _lfmtblpy.D5_MAX_LONG_STRING_SIZE
D5_DT_ERROR = _lfmtblpy.D5_DT_ERROR
D5_DT_BLANK = _lfmtblpy.D5_DT_BLANK
D5_DT_INTEGER = _lfmtblpy.D5_DT_INTEGER
D5_DT_DOUBLE = _lfmtblpy.D5_DT_DOUBLE
D5_DT_DATE = _lfmtblpy.D5_DT_DATE
D5_DT_TIME = _lfmtblpy.D5_DT_TIME
D5_DT_STRING = _lfmtblpy.D5_DT_STRING
D5_DT_DATETIME = _lfmtblpy.D5_DT_DATETIME
D5_DT_DECIMAL = _lfmtblpy.D5_DT_DECIMAL
D5_MAX_CHAIN_ASSOCIATION = _lfmtblpy.D5_MAX_CHAIN_ASSOCIATION
D5_TABLEKIND_REAL = _lfmtblpy.D5_TABLEKIND_REAL
D5_TABLEKIND_MASTER = _lfmtblpy.D5_TABLEKIND_MASTER
D5_TABLEKIND_JOIN = _lfmtblpy.D5_TABLEKIND_JOIN
D5_FILTER_ATTR_SIZE = _lfmtblpy.D5_FILTER_ATTR_SIZE
D5_MAX_CACHE = _lfmtblpy.D5_MAX_CACHE
D5_MAX_SEARCH_TEXT_SIZE = _lfmtblpy.D5_MAX_SEARCH_TEXT_SIZE
D5_N_SUMMARY_DIM = _lfmtblpy.D5_N_SUMMARY_DIM
D5_PASSWORD_LENGTH = _lfmtblpy.D5_PASSWORD_LENGTH
D5_SERIALNUM_SIZE = _lfmtblpy.D5_SERIALNUM_SIZE
DB_FILE_EXTENSION = _lfmtblpy.DB_FILE_EXTENSION
TABLE_FILE_EXTENSION = _lfmtblpy.TABLE_FILE_EXTENSION
D5_OPETYPE_EQUAL = _lfmtblpy.D5_OPETYPE_EQUAL
D5_OPETYPE_BETWEEN = _lfmtblpy.D5_OPETYPE_BETWEEN
D5_OPETYPE_LESSEQUAL = _lfmtblpy.D5_OPETYPE_LESSEQUAL
D5_OPETYPE_GREATEREQUAL = _lfmtblpy.D5_OPETYPE_GREATEREQUAL
D5_OPETYPE_NOTEQUAL = _lfmtblpy.D5_OPETYPE_NOTEQUAL
D5_OPETYPE_WITHIN = _lfmtblpy.D5_OPETYPE_WITHIN
D5_OPETYPE_LESS = _lfmtblpy.D5_OPETYPE_LESS
D5_OPETYPE_GREATER = _lfmtblpy.D5_OPETYPE_GREATER
D5_OPETYPE_STR_LEFT = _lfmtblpy.D5_OPETYPE_STR_LEFT
D5_OPETYPE_STR_MID = _lfmtblpy.D5_OPETYPE_STR_MID
D5_OPETYPE_STR_RIGHT = _lfmtblpy.D5_OPETYPE_STR_RIGHT
D5_SORT_ASCENDANT = _lfmtblpy.D5_SORT_ASCENDANT
D5_SORT_DESCENDANT = _lfmtblpy.D5_SORT_DESCENDANT
D5_LOCALE_SJIS = _lfmtblpy.D5_LOCALE_SJIS
D5_LOCALE_MS932 = _lfmtblpy.D5_LOCALE_MS932
D5_LOCALE_MS949 = _lfmtblpy.D5_LOCALE_MS949
D5_LOCALE_UTF8 = _lfmtblpy.D5_LOCALE_UTF8
D5_LOCALE_EUC = _lfmtblpy.D5_LOCALE_EUC
D5_LOCALE_CP1252 = _lfmtblpy.D5_LOCALE_CP1252
D5_LOCALE_MS936 = _lfmtblpy.D5_LOCALE_MS936
D5_LOCALE_DEFAULT = _lfmtblpy.D5_LOCALE_DEFAULT
D5_DBCODE_SJIS = _lfmtblpy.D5_DBCODE_SJIS
D5_DBCODE_MS932 = _lfmtblpy.D5_DBCODE_MS932
D5_DBCODE_MS949 = _lfmtblpy.D5_DBCODE_MS949
D5_DBCODE_UTF8 = _lfmtblpy.D5_DBCODE_UTF8
D5_DBCODE_EUC = _lfmtblpy.D5_DBCODE_EUC
D5_DBCODE_CP1252 = _lfmtblpy.D5_DBCODE_CP1252
D5_DBCODE_MS936 = _lfmtblpy.D5_DBCODE_MS936
D5_DBCODE_UNKNOWN = _lfmtblpy.D5_DBCODE_UNKNOWN
D5_SUMMARY_NONE = _lfmtblpy.D5_SUMMARY_NONE
D5_SUMMARY_COUNT = _lfmtblpy.D5_SUMMARY_COUNT
D5_SUMMARY_MAX = _lfmtblpy.D5_SUMMARY_MAX
D5_SUMMARY_MIN = _lfmtblpy.D5_SUMMARY_MIN
D5_SUMMARY_SUM = _lfmtblpy.D5_SUMMARY_SUM
D5_SUMMARY_AVERAGE = _lfmtblpy.D5_SUMMARY_AVERAGE
D5_SETOPE_AND = _lfmtblpy.D5_SETOPE_AND
D5_SETOPE_OR = _lfmtblpy.D5_SETOPE_OR
D5_SETOPE_SUB = _lfmtblpy.D5_SETOPE_SUB
J_MASTER = _lfmtblpy.J_MASTER
J_SLAVE = _lfmtblpy.J_SLAVE
D5_MIN_JOIN_CHAIN = _lfmtblpy.D5_MIN_JOIN_CHAIN
D5_MAX_JOIN_CHAIN = _lfmtblpy.D5_MAX_JOIN_CHAIN
class TTableInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTableInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTableInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TableID"] = _lfmtblpy.TTableInfo_TableID_set
    __swig_getmethods__["TableID"] = _lfmtblpy.TTableInfo_TableID_get
    if _newclass:TableID = _swig_property(_lfmtblpy.TTableInfo_TableID_get, _lfmtblpy.TTableInfo_TableID_set)
    __swig_setmethods__["TableKind"] = _lfmtblpy.TTableInfo_TableKind_set
    __swig_getmethods__["TableKind"] = _lfmtblpy.TTableInfo_TableKind_get
    if _newclass:TableKind = _swig_property(_lfmtblpy.TTableInfo_TableKind_get, _lfmtblpy.TTableInfo_TableKind_set)
    __swig_setmethods__["nFilter"] = _lfmtblpy.TTableInfo_nFilter_set
    __swig_getmethods__["nFilter"] = _lfmtblpy.TTableInfo_nFilter_get
    if _newclass:nFilter = _swig_property(_lfmtblpy.TTableInfo_nFilter_get, _lfmtblpy.TTableInfo_nFilter_set)
    __swig_setmethods__["nSet"] = _lfmtblpy.TTableInfo_nSet_set
    __swig_getmethods__["nSet"] = _lfmtblpy.TTableInfo_nSet_get
    if _newclass:nSet = _swig_property(_lfmtblpy.TTableInfo_nSet_get, _lfmtblpy.TTableInfo_nSet_set)
    __swig_setmethods__["TotalRows"] = _lfmtblpy.TTableInfo_TotalRows_set
    __swig_getmethods__["TotalRows"] = _lfmtblpy.TTableInfo_TotalRows_get
    if _newclass:TotalRows = _swig_property(_lfmtblpy.TTableInfo_TotalRows_get, _lfmtblpy.TTableInfo_TotalRows_set)
    __swig_setmethods__["TableName"] = _lfmtblpy.TTableInfo_TableName_set
    __swig_getmethods__["TableName"] = _lfmtblpy.TTableInfo_TableName_get
    if _newclass:TableName = _swig_property(_lfmtblpy.TTableInfo_TableName_get, _lfmtblpy.TTableInfo_TableName_set)
    def __init__(self): 
        this = _lfmtblpy.new_TTableInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmtblpy.delete_TTableInfo
    __del__ = lambda self : None;
TTableInfo_swigregister = _lfmtblpy.TTableInfo_swigregister
TTableInfo_swigregister(TTableInfo)

D5_CUSTOM_ERROR = _lfmtblpy.D5_CUSTOM_ERROR
D5_ERROR_INVALID_VALUE = _lfmtblpy.D5_ERROR_INVALID_VALUE
D5_ERROR_ILLEGAL_VALUE_ORDER = _lfmtblpy.D5_ERROR_ILLEGAL_VALUE_ORDER
D5_ERROR_INNER_SYSTEM = _lfmtblpy.D5_ERROR_INNER_SYSTEM
D5_ERROR_DIR_NOTFOUND = _lfmtblpy.D5_ERROR_DIR_NOTFOUND
D5_ERROR_INVALID_WIDTH = _lfmtblpy.D5_ERROR_INVALID_WIDTH
D5_ERROR_INVALID_ROW_SIZE = _lfmtblpy.D5_ERROR_INVALID_ROW_SIZE
D5_ERROR_TOO_LARGE_ROW_SIZE = _lfmtblpy.D5_ERROR_TOO_LARGE_ROW_SIZE
D5_ERROR_INVALID_ROW_INDEX = _lfmtblpy.D5_ERROR_INVALID_ROW_INDEX
D5_ERROR_ILLEGAL_ROW_ORDER = _lfmtblpy.D5_ERROR_ILLEGAL_ROW_ORDER
D5_ERROR_INVALID_FILTER_SIZE = _lfmtblpy.D5_ERROR_INVALID_FILTER_SIZE
D5_ERROR_TOO_LARGE_FILTER_SIZE = _lfmtblpy.D5_ERROR_TOO_LARGE_FILTER_SIZE
D5_ERROR_INVALID_FILTER_INDEX = _lfmtblpy.D5_ERROR_INVALID_FILTER_INDEX
D5_ERROR_ILLEGAL_FILTER_ORDER = _lfmtblpy.D5_ERROR_ILLEGAL_FILTER_ORDER
D5_ERROR_TOO_MANY_DATA = _lfmtblpy.D5_ERROR_TOO_MANY_DATA
D5_ERROR_TOO_LONG_STRING = _lfmtblpy.D5_ERROR_TOO_LONG_STRING
D5_ERROR_ILLEGAL_STRING_ORDER = _lfmtblpy.D5_ERROR_ILLEGAL_STRING_ORDER
D5_ERROR_OUT_OF_MEMORY = _lfmtblpy.D5_ERROR_OUT_OF_MEMORY
D5_ERROR_OUT_OF_SUMMARY_AREA = _lfmtblpy.D5_ERROR_OUT_OF_SUMMARY_AREA
D5_ERROR_INVALID_RANGE = _lfmtblpy.D5_ERROR_INVALID_RANGE
D5_ERROR_MEMORY_LIMIT_OVERFLOW = _lfmtblpy.D5_ERROR_MEMORY_LIMIT_OVERFLOW
D5_ERROR_TOO_MANY_USERS = _lfmtblpy.D5_ERROR_TOO_MANY_USERS
D5_ERROR_ILLEGAL_DATA_TYPE = _lfmtblpy.D5_ERROR_ILLEGAL_DATA_TYPE
D5_ERROR_ILLEGAL_OPERATION = _lfmtblpy.D5_ERROR_ILLEGAL_OPERATION
D5_ERROR_ILLEGAL_TABLE_NAME = _lfmtblpy.D5_ERROR_ILLEGAL_TABLE_NAME
D5_ERROR_ILLEGAL_FILTER_NAME = _lfmtblpy.D5_ERROR_ILLEGAL_FILTER_NAME
D5_ERROR_ILLEGAL_TARGET = _lfmtblpy.D5_ERROR_ILLEGAL_TARGET
D5_ERROR_INVALID_HANDLE = _lfmtblpy.D5_ERROR_INVALID_HANDLE
D5_ERROR_OVERFLOW_TABLE = _lfmtblpy.D5_ERROR_OVERFLOW_TABLE
D5_ERROR_OVERFLOW_REAL = _lfmtblpy.D5_ERROR_OVERFLOW_REAL
D5_ERROR_OVERFLOW_JOIN = _lfmtblpy.D5_ERROR_OVERFLOW_JOIN
D5_ERROR_OVERFLOW_SET = _lfmtblpy.D5_ERROR_OVERFLOW_SET
D5_ERROR_OVERFLOW_SLAVE = _lfmtblpy.D5_ERROR_OVERFLOW_SLAVE
D5_ERROR_TOO_LARGE_JOIN_TABLE = _lfmtblpy.D5_ERROR_TOO_LARGE_JOIN_TABLE
D5_ERROR_NO_DATA = _lfmtblpy.D5_ERROR_NO_DATA
D5_ERROR_NO_FILTER = _lfmtblpy.D5_ERROR_NO_FILTER
D5_ERROR_NO_MASTER_FILTER = _lfmtblpy.D5_ERROR_NO_MASTER_FILTER
D5_ERROR_NO_SLAVE_FILTER = _lfmtblpy.D5_ERROR_NO_SLAVE_FILTER
D5_ERROR_NO_TABLE = _lfmtblpy.D5_ERROR_NO_TABLE
D5_ERROR_NO_MASTER_TABLE = _lfmtblpy.D5_ERROR_NO_MASTER_TABLE
D5_ERROR_NO_SLAVE_TABLE = _lfmtblpy.D5_ERROR_NO_SLAVE_TABLE
D5_ERROR_NO_JOIN_TABLE = _lfmtblpy.D5_ERROR_NO_JOIN_TABLE
D5_ERROR_NO_SET = _lfmtblpy.D5_ERROR_NO_SET
D5_ERROR_NO_MASTER_SET = _lfmtblpy.D5_ERROR_NO_MASTER_SET
D5_ERROR_NO_SLAVE_SET = _lfmtblpy.D5_ERROR_NO_SLAVE_SET
D5_ERROR_INVALID_DATA_TYPE = _lfmtblpy.D5_ERROR_INVALID_DATA_TYPE
D5_ERROR_INVALID_DATA_SIZE = _lfmtblpy.D5_ERROR_INVALID_DATA_SIZE
D5_ERROR_INVALID_TABLE_TYPE = _lfmtblpy.D5_ERROR_INVALID_TABLE_TYPE
D5_ERROR_INVALID_TABLE_SIZE = _lfmtblpy.D5_ERROR_INVALID_TABLE_SIZE
D5_ERROR_INVALID_INDEX = _lfmtblpy.D5_ERROR_INVALID_INDEX
D5_ERROR_INVALID_SETID = _lfmtblpy.D5_ERROR_INVALID_SETID
D5_ERROR_MISMATCH_DATA_SIZE = _lfmtblpy.D5_ERROR_MISMATCH_DATA_SIZE
D5_ERROR_MISMATCH_DATA_TYPE = _lfmtblpy.D5_ERROR_MISMATCH_DATA_TYPE
D5_ERROR_MISMATCH_TABLE_TYPE = _lfmtblpy.D5_ERROR_MISMATCH_TABLE_TYPE
D5_ERROR_FILTER_COUNT = _lfmtblpy.D5_ERROR_FILTER_COUNT
D5_ERROR_MISMATCH_FILTER = _lfmtblpy.D5_ERROR_MISMATCH_FILTER
D5_ERROR_SET_UNASSIGNED = _lfmtblpy.D5_ERROR_SET_UNASSIGNED
D5_ERROR_INVALID_PARAM = _lfmtblpy.D5_ERROR_INVALID_PARAM
D5_ERROR_SUMMARY_NOT_MADE = _lfmtblpy.D5_ERROR_SUMMARY_NOT_MADE
D5_ERROR_DUPLICATE_TABLE_NAME = _lfmtblpy.D5_ERROR_DUPLICATE_TABLE_NAME
D5_ERROR_DUPLICATE_FILTER_NAME = _lfmtblpy.D5_ERROR_DUPLICATE_FILTER_NAME
D5_ERROR_DELETE_ROOT_SET = _lfmtblpy.D5_ERROR_DELETE_ROOT_SET
D5_ERROR_REFFERED_TABLE = _lfmtblpy.D5_ERROR_REFFERED_TABLE
D5_ERROR_INVALID_FILTERID = _lfmtblpy.D5_ERROR_INVALID_FILTERID
D5_ERROR_NO_REALTABLE = _lfmtblpy.D5_ERROR_NO_REALTABLE
D5_ERROR_NO_JOINTABLE = _lfmtblpy.D5_ERROR_NO_JOINTABLE
D5_ERROE_UNINIT_PARAM = _lfmtblpy.D5_ERROE_UNINIT_PARAM
D5_ERROR_FILE_IO = _lfmtblpy.D5_ERROR_FILE_IO
D5_ERROR_FILE_PATH = _lfmtblpy.D5_ERROR_FILE_PATH
D5_ERROR_NOT_TABLE_NAME = _lfmtblpy.D5_ERROR_NOT_TABLE_NAME
D5_ERROR_NOT_INNERJOIN = _lfmtblpy.D5_ERROR_NOT_INNERJOIN
D5_ERROR_INVALID_TABLE_NAME = _lfmtblpy.D5_ERROR_INVALID_TABLE_NAME
D5_ERROR_NOT_JOIN_CHAIN = _lfmtblpy.D5_ERROR_NOT_JOIN_CHAIN
D5_ERROR_MISMATCH_DATA = _lfmtblpy.D5_ERROR_MISMATCH_DATA
D5_ERROR_EMPTY_SET = _lfmtblpy.D5_ERROR_EMPTY_SET
D5_ERROR_DIR_ALREADY_EXIST = _lfmtblpy.D5_ERROR_DIR_ALREADY_EXIST
D5_ERROR_DIR_INVALID_PATH = _lfmtblpy.D5_ERROR_DIR_INVALID_PATH
D5_ERROR_DIR_NOT_EMPTY = _lfmtblpy.D5_ERROR_DIR_NOT_EMPTY
D5_ERROR_ACCESS_DENIED = _lfmtblpy.D5_ERROR_ACCESS_DENIED
D5_ERROR_ALREADY_CLOSED = _lfmtblpy.D5_ERROR_ALREADY_CLOSED
D5_ERROR_ALREADY_OPENED = _lfmtblpy.D5_ERROR_ALREADY_OPENED
D5_ERROR_ALREADY_DONE = _lfmtblpy.D5_ERROR_ALREADY_DONE
D5_ERROR_DETAIL_NOT_MADE = _lfmtblpy.D5_ERROR_DETAIL_NOT_MADE
D5_ERROR_GET_PROJECTION = _lfmtblpy.D5_ERROR_GET_PROJECTION
D5_ERROR_ADDFILTER2 = _lfmtblpy.D5_ERROR_ADDFILTER2
D5_ERROR_SAVE_FILE_NAME = _lfmtblpy.D5_ERROR_SAVE_FILE_NAME
D5_ERROR_DATA_VERSION = _lfmtblpy.D5_ERROR_DATA_VERSION
D5_ERROR_INVALID_OPERATION = _lfmtblpy.D5_ERROR_INVALID_OPERATION
D5_ERROR_INVALID_DATATABLE = _lfmtblpy.D5_ERROR_INVALID_DATATABLE
D5_ERROR_INVALID_DIMSIZE = _lfmtblpy.D5_ERROR_INVALID_DIMSIZE
D5_ERROR_MEMORY_STREAM_CLOSE = _lfmtblpy.D5_ERROR_MEMORY_STREAM_CLOSE
D5_ERROR_FIND_NOT_OPEN = _lfmtblpy.D5_ERROR_FIND_NOT_OPEN
D5_ERROR_FIND_VERSION = _lfmtblpy.D5_ERROR_FIND_VERSION
D5_ERROR_CALC_TARGET_FILTER = _lfmtblpy.D5_ERROR_CALC_TARGET_FILTER
D5_ERROR_NOT_NUMERICAL_FILTER = _lfmtblpy.D5_ERROR_NOT_NUMERICAL_FILTER
D5_ERROR_CALC_FILTER_AREA_OVERFLOW = _lfmtblpy.D5_ERROR_CALC_FILTER_AREA_OVERFLOW
D5_ERROR_CALC_CONST_AREA_OVERFLOW = _lfmtblpy.D5_ERROR_CALC_CONST_AREA_OVERFLOW
D5_ERROR_CALC_COMMAND_AREA_OVERFLOW = _lfmtblpy.D5_ERROR_CALC_COMMAND_AREA_OVERFLOW
D5_ERROR_CALC_SYNTAX_ERROR = _lfmtblpy.D5_ERROR_CALC_SYNTAX_ERROR
D5_ERROR_SQL_DB = _lfmtblpy.D5_ERROR_SQL_DB
D5_CORBA_COMM_FAILURE = _lfmtblpy.D5_CORBA_COMM_FAILURE
D5_ERROR_NOT_TREE = _lfmtblpy.D5_ERROR_NOT_TREE
D5_ERROR_CALC_STR_STACK_OVERFLOW = _lfmtblpy.D5_ERROR_CALC_STR_STACK_OVERFLOW
D5_ERROR_CALC_NUM_STACK_OVERFLOW = _lfmtblpy.D5_ERROR_CALC_NUM_STACK_OVERFLOW
D5_ERROR_CALC_PRG_STACK_OVERFLOW = _lfmtblpy.D5_ERROR_CALC_PRG_STACK_OVERFLOW
D5_ERROR_CALC_CONVERT = _lfmtblpy.D5_ERROR_CALC_CONVERT
D5_ERROR_CALC_STR_AREA_OVERFLOW = _lfmtblpy.D5_ERROR_CALC_STR_AREA_OVERFLOW
D5_INVALID_SHARED_OPERATION = _lfmtblpy.D5_INVALID_SHARED_OPERATION
D5_INVALID_SHARED_FILE = _lfmtblpy.D5_INVALID_SHARED_FILE
D5_INVALID_OS = _lfmtblpy.D5_INVALID_OS
D5_ERROR_SHARED_MEMORY = _lfmtblpy.D5_ERROR_SHARED_MEMORY
D5_CATALOG_PARSE_ERROR = _lfmtblpy.D5_CATALOG_PARSE_ERROR
D5_INVALID_DATA = _lfmtblpy.D5_INVALID_DATA
D5_UNDEFINED_TYPE = _lfmtblpy.D5_UNDEFINED_TYPE
D5_DATA_OVERFLOW = _lfmtblpy.D5_DATA_OVERFLOW
D5_ROW_SIZE_OVERFLOW = _lfmtblpy.D5_ROW_SIZE_OVERFLOW
D5_MEM_OVERFLOW = _lfmtblpy.D5_MEM_OVERFLOW
D5_ERROR_ALREADY_EXIST = _lfmtblpy.D5_ERROR_ALREADY_EXIST
D5_ERROR_INVALID_DBCODE = _lfmtblpy.D5_ERROR_INVALID_DBCODE
D5_ERROR_INVALID_LOCALEID = _lfmtblpy.D5_ERROR_INVALID_LOCALEID
D5_ERROR_INVALID_CHARACTER_FOUND = _lfmtblpy.D5_ERROR_INVALID_CHARACTER_FOUND
D5_ERROR_OUT_OF_RANGE = _lfmtblpy.D5_ERROR_OUT_OF_RANGE
D5_ERROR_INVALID_FILEVERSION = _lfmtblpy.D5_ERROR_INVALID_FILEVERSION
D5_ERROR_FILEVERSION_NOT_EXIST = _lfmtblpy.D5_ERROR_FILEVERSION_NOT_EXIST
D5_ERROR_NOT_REALTABLE = _lfmtblpy.D5_ERROR_NOT_REALTABLE
D5_ERROR_QUERY_INTERNAL_ERROR = _lfmtblpy.D5_ERROR_QUERY_INTERNAL_ERROR
D5_ERROR_QUERY_SYNTAX_ERROR = _lfmtblpy.D5_ERROR_QUERY_SYNTAX_ERROR
D5_ERROR_QUERY_SEMANTIC_ERROR = _lfmtblpy.D5_ERROR_QUERY_SEMANTIC_ERROR
D5_ERROR_QUERY_DATA_TYPE_MISMATCH = _lfmtblpy.D5_ERROR_QUERY_DATA_TYPE_MISMATCH
D5_ERROR_QUERY_TOO_LARGE_TEXT = _lfmtblpy.D5_ERROR_QUERY_TOO_LARGE_TEXT
D5_ERROR_EDITING_HSS_FILTER_NOT_ALLOWED = _lfmtblpy.D5_ERROR_EDITING_HSS_FILTER_NOT_ALLOWED
D5_ERROR_TOO_LARGE_SUMMARY_ROW1 = _lfmtblpy.D5_ERROR_TOO_LARGE_SUMMARY_ROW1
D5_ERROR_TOO_LARGE_SUMMARY_ROW2 = _lfmtblpy.D5_ERROR_TOO_LARGE_SUMMARY_ROW2
D5_ERROR_SUMMARY_IRREGULAR_DATA_DETECT = _lfmtblpy.D5_ERROR_SUMMARY_IRREGULAR_DATA_DETECT
D5_ERROR_SUMMARY_DATA_NOT_DETECT = _lfmtblpy.D5_ERROR_SUMMARY_DATA_NOT_DETECT
D5_ERROR_SUMMARY_NOT_NUM_MEASURE = _lfmtblpy.D5_ERROR_SUMMARY_NOT_NUM_MEASURE
D5_ERROR_SUMMARY_NOT_SUITABLE_TOTAL = _lfmtblpy.D5_ERROR_SUMMARY_NOT_SUITABLE_TOTAL
D5_ERROR_SMP_THREAD_ABORTED = _lfmtblpy.D5_ERROR_SMP_THREAD_ABORTED
D5_ERROR_UNKNOWN = _lfmtblpy.D5_ERROR_UNKNOWN
D5_ERROR_NOT_IMPLEMENTED = _lfmtblpy.D5_ERROR_NOT_IMPLEMENTED
D5_ERROR_PASSWORD_FORMAT_ERROR = _lfmtblpy.D5_ERROR_PASSWORD_FORMAT_ERROR
D5_ERROR_PASSWORD_MAC_ADDRESS_MISMATCH = _lfmtblpy.D5_ERROR_PASSWORD_MAC_ADDRESS_MISMATCH
D5_ERROR_PASSWORD_EXPIRE_DATE_MISMATCH = _lfmtblpy.D5_ERROR_PASSWORD_EXPIRE_DATE_MISMATCH
D5_FILESIZE_OVERFLOW = _lfmtblpy.D5_FILESIZE_OVERFLOW
D5_ERROR_LOCK = _lfmtblpy.D5_ERROR_LOCK
D5_ERROR_TRIAL_LOCK = _lfmtblpy.D5_ERROR_TRIAL_LOCK
class TRFilterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRFilterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRFilterInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PVSize"] = _lfmtblpy.TRFilterInfo_PVSize_set
    __swig_getmethods__["PVSize"] = _lfmtblpy.TRFilterInfo_PVSize_get
    if _newclass:PVSize = _swig_property(_lfmtblpy.TRFilterInfo_PVSize_get, _lfmtblpy.TRFilterInfo_PVSize_set)
    __swig_setmethods__["VLType"] = _lfmtblpy.TRFilterInfo_VLType_set
    __swig_getmethods__["VLType"] = _lfmtblpy.TRFilterInfo_VLType_get
    if _newclass:VLType = _swig_property(_lfmtblpy.TRFilterInfo_VLType_get, _lfmtblpy.TRFilterInfo_VLType_set)
    __swig_setmethods__["VLWidth"] = _lfmtblpy.TRFilterInfo_VLWidth_set
    __swig_getmethods__["VLWidth"] = _lfmtblpy.TRFilterInfo_VLWidth_get
    if _newclass:VLWidth = _swig_property(_lfmtblpy.TRFilterInfo_VLWidth_get, _lfmtblpy.TRFilterInfo_VLWidth_set)
    __swig_setmethods__["VLSize"] = _lfmtblpy.TRFilterInfo_VLSize_set
    __swig_getmethods__["VLSize"] = _lfmtblpy.TRFilterInfo_VLSize_get
    if _newclass:VLSize = _swig_property(_lfmtblpy.TRFilterInfo_VLSize_get, _lfmtblpy.TRFilterInfo_VLSize_set)
    __swig_setmethods__["CharAreaSize"] = _lfmtblpy.TRFilterInfo_CharAreaSize_set
    __swig_getmethods__["CharAreaSize"] = _lfmtblpy.TRFilterInfo_CharAreaSize_get
    if _newclass:CharAreaSize = _swig_property(_lfmtblpy.TRFilterInfo_CharAreaSize_get, _lfmtblpy.TRFilterInfo_CharAreaSize_set)
    __swig_setmethods__["FilterName"] = _lfmtblpy.TRFilterInfo_FilterName_set
    __swig_getmethods__["FilterName"] = _lfmtblpy.TRFilterInfo_FilterName_get
    if _newclass:FilterName = _swig_property(_lfmtblpy.TRFilterInfo_FilterName_get, _lfmtblpy.TRFilterInfo_FilterName_set)
    def __init__(self): 
        this = _lfmtblpy.new_TRFilterInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmtblpy.delete_TRFilterInfo
    __del__ = lambda self : None;
TRFilterInfo_swigregister = _lfmtblpy.TRFilterInfo_swigregister
TRFilterInfo_swigregister(TRFilterInfo)

class TRMemInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRMemInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRMemInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TotalPhys"] = _lfmtblpy.TRMemInfo_TotalPhys_set
    __swig_getmethods__["TotalPhys"] = _lfmtblpy.TRMemInfo_TotalPhys_get
    if _newclass:TotalPhys = _swig_property(_lfmtblpy.TRMemInfo_TotalPhys_get, _lfmtblpy.TRMemInfo_TotalPhys_set)
    __swig_setmethods__["AvailPhys"] = _lfmtblpy.TRMemInfo_AvailPhys_set
    __swig_getmethods__["AvailPhys"] = _lfmtblpy.TRMemInfo_AvailPhys_get
    if _newclass:AvailPhys = _swig_property(_lfmtblpy.TRMemInfo_AvailPhys_get, _lfmtblpy.TRMemInfo_AvailPhys_set)
    def __init__(self): 
        this = _lfmtblpy.new_TRMemInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmtblpy.delete_TRMemInfo
    __del__ = lambda self : None;
TRMemInfo_swigregister = _lfmtblpy.TRMemInfo_swigregister
TRMemInfo_swigregister(TRMemInfo)

D5_MAX_STRING_LENGTH_CHAR_CODE = _lfmtblpy.D5_MAX_STRING_LENGTH_CHAR_CODE
class TREnvironment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TREnvironment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TREnvironment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HostName"] = _lfmtblpy.TREnvironment_HostName_set
    __swig_getmethods__["HostName"] = _lfmtblpy.TREnvironment_HostName_get
    if _newclass:HostName = _swig_property(_lfmtblpy.TREnvironment_HostName_get, _lfmtblpy.TREnvironment_HostName_set)
    __swig_setmethods__["OSType"] = _lfmtblpy.TREnvironment_OSType_set
    __swig_getmethods__["OSType"] = _lfmtblpy.TREnvironment_OSType_get
    if _newclass:OSType = _swig_property(_lfmtblpy.TREnvironment_OSType_get, _lfmtblpy.TREnvironment_OSType_set)
    __swig_setmethods__["OSMajorVersion"] = _lfmtblpy.TREnvironment_OSMajorVersion_set
    __swig_getmethods__["OSMajorVersion"] = _lfmtblpy.TREnvironment_OSMajorVersion_get
    if _newclass:OSMajorVersion = _swig_property(_lfmtblpy.TREnvironment_OSMajorVersion_get, _lfmtblpy.TREnvironment_OSMajorVersion_set)
    __swig_setmethods__["OSMinorVersion"] = _lfmtblpy.TREnvironment_OSMinorVersion_set
    __swig_getmethods__["OSMinorVersion"] = _lfmtblpy.TREnvironment_OSMinorVersion_get
    if _newclass:OSMinorVersion = _swig_property(_lfmtblpy.TREnvironment_OSMinorVersion_get, _lfmtblpy.TREnvironment_OSMinorVersion_set)
    __swig_setmethods__["MachineArchitecture"] = _lfmtblpy.TREnvironment_MachineArchitecture_set
    __swig_getmethods__["MachineArchitecture"] = _lfmtblpy.TREnvironment_MachineArchitecture_get
    if _newclass:MachineArchitecture = _swig_property(_lfmtblpy.TREnvironment_MachineArchitecture_get, _lfmtblpy.TREnvironment_MachineArchitecture_set)
    __swig_setmethods__["Endian"] = _lfmtblpy.TREnvironment_Endian_set
    __swig_getmethods__["Endian"] = _lfmtblpy.TREnvironment_Endian_get
    if _newclass:Endian = _swig_property(_lfmtblpy.TREnvironment_Endian_get, _lfmtblpy.TREnvironment_Endian_set)
    __swig_setmethods__["ELF"] = _lfmtblpy.TREnvironment_ELF_set
    __swig_getmethods__["ELF"] = _lfmtblpy.TREnvironment_ELF_get
    if _newclass:ELF = _swig_property(_lfmtblpy.TREnvironment_ELF_get, _lfmtblpy.TREnvironment_ELF_set)
    __swig_setmethods__["ProcessorCount"] = _lfmtblpy.TREnvironment_ProcessorCount_set
    __swig_getmethods__["ProcessorCount"] = _lfmtblpy.TREnvironment_ProcessorCount_get
    if _newclass:ProcessorCount = _swig_property(_lfmtblpy.TREnvironment_ProcessorCount_get, _lfmtblpy.TREnvironment_ProcessorCount_set)
    __swig_setmethods__["ProcessType"] = _lfmtblpy.TREnvironment_ProcessType_set
    __swig_getmethods__["ProcessType"] = _lfmtblpy.TREnvironment_ProcessType_get
    if _newclass:ProcessType = _swig_property(_lfmtblpy.TREnvironment_ProcessType_get, _lfmtblpy.TREnvironment_ProcessType_set)
    __swig_setmethods__["OSCharCode"] = _lfmtblpy.TREnvironment_OSCharCode_set
    __swig_getmethods__["OSCharCode"] = _lfmtblpy.TREnvironment_OSCharCode_get
    if _newclass:OSCharCode = _swig_property(_lfmtblpy.TREnvironment_OSCharCode_get, _lfmtblpy.TREnvironment_OSCharCode_set)
    __swig_setmethods__["DBCharCode"] = _lfmtblpy.TREnvironment_DBCharCode_set
    __swig_getmethods__["DBCharCode"] = _lfmtblpy.TREnvironment_DBCharCode_get
    if _newclass:DBCharCode = _swig_property(_lfmtblpy.TREnvironment_DBCharCode_get, _lfmtblpy.TREnvironment_DBCharCode_set)
    def __init__(self): 
        this = _lfmtblpy.new_TREnvironment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmtblpy.delete_TREnvironment
    __del__ = lambda self : None;
TREnvironment_swigregister = _lfmtblpy.TREnvironment_swigregister
TREnvironment_swigregister(TREnvironment)

class D5FileInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, D5FileInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, D5FileInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OSType"] = _lfmtblpy.D5FileInfo_OSType_set
    __swig_getmethods__["OSType"] = _lfmtblpy.D5FileInfo_OSType_get
    if _newclass:OSType = _swig_property(_lfmtblpy.D5FileInfo_OSType_get, _lfmtblpy.D5FileInfo_OSType_set)
    __swig_setmethods__["Endian"] = _lfmtblpy.D5FileInfo_Endian_set
    __swig_getmethods__["Endian"] = _lfmtblpy.D5FileInfo_Endian_get
    if _newclass:Endian = _swig_property(_lfmtblpy.D5FileInfo_Endian_get, _lfmtblpy.D5FileInfo_Endian_set)
    __swig_setmethods__["ELF"] = _lfmtblpy.D5FileInfo_ELF_set
    __swig_getmethods__["ELF"] = _lfmtblpy.D5FileInfo_ELF_get
    if _newclass:ELF = _swig_property(_lfmtblpy.D5FileInfo_ELF_get, _lfmtblpy.D5FileInfo_ELF_set)
    __swig_setmethods__["DBCharCode"] = _lfmtblpy.D5FileInfo_DBCharCode_set
    __swig_getmethods__["DBCharCode"] = _lfmtblpy.D5FileInfo_DBCharCode_get
    if _newclass:DBCharCode = _swig_property(_lfmtblpy.D5FileInfo_DBCharCode_get, _lfmtblpy.D5FileInfo_DBCharCode_set)
    __swig_setmethods__["Version"] = _lfmtblpy.D5FileInfo_Version_set
    __swig_getmethods__["Version"] = _lfmtblpy.D5FileInfo_Version_get
    if _newclass:Version = _swig_property(_lfmtblpy.D5FileInfo_Version_get, _lfmtblpy.D5FileInfo_Version_set)
    def __init__(self): 
        this = _lfmtblpy.new_D5FileInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmtblpy.delete_D5FileInfo
    __del__ = lambda self : None;
D5FileInfo_swigregister = _lfmtblpy.D5FileInfo_swigregister
D5FileInfo_swigregister(D5FileInfo)

class TLicenseData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLicenseData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TLicenseData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LicenseMacAddr"] = _lfmtblpy.TLicenseData_LicenseMacAddr_set
    __swig_getmethods__["LicenseMacAddr"] = _lfmtblpy.TLicenseData_LicenseMacAddr_get
    if _newclass:LicenseMacAddr = _swig_property(_lfmtblpy.TLicenseData_LicenseMacAddr_get, _lfmtblpy.TLicenseData_LicenseMacAddr_set)
    __swig_setmethods__["MaxRow"] = _lfmtblpy.TLicenseData_MaxRow_set
    __swig_getmethods__["MaxRow"] = _lfmtblpy.TLicenseData_MaxRow_get
    if _newclass:MaxRow = _swig_property(_lfmtblpy.TLicenseData_MaxRow_get, _lfmtblpy.TLicenseData_MaxRow_set)
    __swig_setmethods__["MaxMemory"] = _lfmtblpy.TLicenseData_MaxMemory_set
    __swig_getmethods__["MaxMemory"] = _lfmtblpy.TLicenseData_MaxMemory_get
    if _newclass:MaxMemory = _swig_property(_lfmtblpy.TLicenseData_MaxMemory_get, _lfmtblpy.TLicenseData_MaxMemory_set)
    __swig_setmethods__["CpuNum"] = _lfmtblpy.TLicenseData_CpuNum_set
    __swig_getmethods__["CpuNum"] = _lfmtblpy.TLicenseData_CpuNum_get
    if _newclass:CpuNum = _swig_property(_lfmtblpy.TLicenseData_CpuNum_get, _lfmtblpy.TLicenseData_CpuNum_set)
    __swig_setmethods__["UserNum"] = _lfmtblpy.TLicenseData_UserNum_set
    __swig_getmethods__["UserNum"] = _lfmtblpy.TLicenseData_UserNum_get
    if _newclass:UserNum = _swig_property(_lfmtblpy.TLicenseData_UserNum_get, _lfmtblpy.TLicenseData_UserNum_set)
    __swig_setmethods__["ExpirationDate"] = _lfmtblpy.TLicenseData_ExpirationDate_set
    __swig_getmethods__["ExpirationDate"] = _lfmtblpy.TLicenseData_ExpirationDate_get
    if _newclass:ExpirationDate = _swig_property(_lfmtblpy.TLicenseData_ExpirationDate_get, _lfmtblpy.TLicenseData_ExpirationDate_set)
    def __init__(self): 
        this = _lfmtblpy.new_TLicenseData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lfmtblpy.delete_TLicenseData
    __del__ = lambda self : None;
TLicenseData_swigregister = _lfmtblpy.TLicenseData_swigregister
TLicenseData_swigregister(TLicenseData)


def RD5GetVersion(*args):
  return _lfmtblpy.RD5GetVersion(*args)
RD5GetVersion = _lfmtblpy.RD5GetVersion

def RD5ClearDB():
  return _lfmtblpy.RD5ClearDB()
RD5ClearDB = _lfmtblpy.RD5ClearDB

def RD5LoadDB(*args):
  return _lfmtblpy.RD5LoadDB(*args)
RD5LoadDB = _lfmtblpy.RD5LoadDB

def RD5SaveDBAs(*args):
  return _lfmtblpy.RD5SaveDBAs(*args)
RD5SaveDBAs = _lfmtblpy.RD5SaveDBAs

def RD5ExportAsCSV(*args):
  return _lfmtblpy.RD5ExportAsCSV(*args)
RD5ExportAsCSV = _lfmtblpy.RD5ExportAsCSV

def RD5ExportAsTAB(*args):
  return _lfmtblpy.RD5ExportAsTAB(*args)
RD5ExportAsTAB = _lfmtblpy.RD5ExportAsTAB

def RD5SaveAsCatalog(*args):
  return _lfmtblpy.RD5SaveAsCatalog(*args)
RD5SaveAsCatalog = _lfmtblpy.RD5SaveAsCatalog

def RD5SaveAsCatalogEx(*args):
  return _lfmtblpy.RD5SaveAsCatalogEx(*args)
RD5SaveAsCatalogEx = _lfmtblpy.RD5SaveAsCatalogEx

def RD5SaveDB():
  return _lfmtblpy.RD5SaveDB()
RD5SaveDB = _lfmtblpy.RD5SaveDB

def RD5GetPathName(*args):
  return _lfmtblpy.RD5GetPathName(*args)
RD5GetPathName = _lfmtblpy.RD5GetPathName

def RD5GetNTable():
  return _lfmtblpy.RD5GetNTable()
RD5GetNTable = _lfmtblpy.RD5GetNTable

def RD5GetTableIDList(*args):
  return _lfmtblpy.RD5GetTableIDList(*args)
RD5GetTableIDList = _lfmtblpy.RD5GetTableIDList

def RD5GenerateTableName(*args):
  return _lfmtblpy.RD5GenerateTableName(*args)
RD5GenerateTableName = _lfmtblpy.RD5GenerateTableName

def RD5LoadRealTable(*args):
  return _lfmtblpy.RD5LoadRealTable(*args)
RD5LoadRealTable = _lfmtblpy.RD5LoadRealTable

def RD5AddRealTable(*args):
  return _lfmtblpy.RD5AddRealTable(*args)
RD5AddRealTable = _lfmtblpy.RD5AddRealTable

def RD5SaveRealTable(*args):
  return _lfmtblpy.RD5SaveRealTable(*args)
RD5SaveRealTable = _lfmtblpy.RD5SaveRealTable

def RD5SaveRealTableAs(*args):
  return _lfmtblpy.RD5SaveRealTableAs(*args)
RD5SaveRealTableAs = _lfmtblpy.RD5SaveRealTableAs

def RD5AddJoinTable(*args):
  return _lfmtblpy.RD5AddJoinTable(*args)
RD5AddJoinTable = _lfmtblpy.RD5AddJoinTable

def RD5ExtractJoinInOut(*args):
  return _lfmtblpy.RD5ExtractJoinInOut(*args)
RD5ExtractJoinInOut = _lfmtblpy.RD5ExtractJoinInOut

def RD5ConvertJoinToReal(*args):
  return _lfmtblpy.RD5ConvertJoinToReal(*args)
RD5ConvertJoinToReal = _lfmtblpy.RD5ConvertJoinToReal

def RD5RealizeJoinChain(*args):
  return _lfmtblpy.RD5RealizeJoinChain(*args)
RD5RealizeJoinChain = _lfmtblpy.RD5RealizeJoinChain

def RD5RealizeJoinChainEx(*args):
  return _lfmtblpy.RD5RealizeJoinChainEx(*args)
RD5RealizeJoinChainEx = _lfmtblpy.RD5RealizeJoinChainEx

def RD5QualifyTree(*args):
  return _lfmtblpy.RD5QualifyTree(*args)
RD5QualifyTree = _lfmtblpy.RD5QualifyTree

def RD5SetMaxJoinChain(*args):
  return _lfmtblpy.RD5SetMaxJoinChain(*args)
RD5SetMaxJoinChain = _lfmtblpy.RD5SetMaxJoinChain

def RD5DeleteTable(*args):
  return _lfmtblpy.RD5DeleteTable(*args)
RD5DeleteTable = _lfmtblpy.RD5DeleteTable

def RD5GetTableName(*args):
  return _lfmtblpy.RD5GetTableName(*args)
RD5GetTableName = _lfmtblpy.RD5GetTableName

def RD5GetTableProperty(*args):
  return _lfmtblpy.RD5GetTableProperty(*args)
RD5GetTableProperty = _lfmtblpy.RD5GetTableProperty

def RD5GetJoinInfo(*args):
  return _lfmtblpy.RD5GetJoinInfo(*args)
RD5GetJoinInfo = _lfmtblpy.RD5GetJoinInfo

def RD5GetJoinInfoEx(*args):
  return _lfmtblpy.RD5GetJoinInfoEx(*args)
RD5GetJoinInfoEx = _lfmtblpy.RD5GetJoinInfoEx

def RD5GetJoinSrcTblIDs(*args):
  return _lfmtblpy.RD5GetJoinSrcTblIDs(*args)
RD5GetJoinSrcTblIDs = _lfmtblpy.RD5GetJoinSrcTblIDs

def RD5GetJoinSrcTblInfo(*args):
  return _lfmtblpy.RD5GetJoinSrcTblInfo(*args)
RD5GetJoinSrcTblInfo = _lfmtblpy.RD5GetJoinSrcTblInfo

def RD5DuplicateRealTable(*args):
  return _lfmtblpy.RD5DuplicateRealTable(*args)
RD5DuplicateRealTable = _lfmtblpy.RD5DuplicateRealTable

def RD5ExtractRealTable(*args):
  return _lfmtblpy.RD5ExtractRealTable(*args)
RD5ExtractRealTable = _lfmtblpy.RD5ExtractRealTable

def RD5ExtractRealTableEx(*args):
  return _lfmtblpy.RD5ExtractRealTableEx(*args)
RD5ExtractRealTableEx = _lfmtblpy.RD5ExtractRealTableEx

def RD5CombineRealTable(*args):
  return _lfmtblpy.RD5CombineRealTable(*args)
RD5CombineRealTable = _lfmtblpy.RD5CombineRealTable

def RD5CombineRealTableEx(*args):
  return _lfmtblpy.RD5CombineRealTableEx(*args)
RD5CombineRealTableEx = _lfmtblpy.RD5CombineRealTableEx

def RD5CombineRealTableEx2(*args):
  return _lfmtblpy.RD5CombineRealTableEx2(*args)
RD5CombineRealTableEx2 = _lfmtblpy.RD5CombineRealTableEx2

def RD5CombineTableList(*args):
  return _lfmtblpy.RD5CombineTableList(*args)
RD5CombineTableList = _lfmtblpy.RD5CombineTableList

def RD5CondenseRealTable(*args):
  return _lfmtblpy.RD5CondenseRealTable(*args)
RD5CondenseRealTable = _lfmtblpy.RD5CondenseRealTable

def RD5GenTableName(*args):
  return _lfmtblpy.RD5GenTableName(*args)
RD5GenTableName = _lfmtblpy.RD5GenTableName

def RD5GetNSet(*args):
  return _lfmtblpy.RD5GetNSet(*args)
RD5GetNSet = _lfmtblpy.RD5GetNSet

def RD5GetTotalRows(*args):
  return _lfmtblpy.RD5GetTotalRows(*args)
RD5GetTotalRows = _lfmtblpy.RD5GetTotalRows

def RD5PurgeSubsets(*args):
  return _lfmtblpy.RD5PurgeSubsets(*args)
RD5PurgeSubsets = _lfmtblpy.RD5PurgeSubsets

def RD5GetSetSize(*args):
  return _lfmtblpy.RD5GetSetSize(*args)
RD5GetSetSize = _lfmtblpy.RD5GetSetSize

def RD5GetSet(*args):
  return _lfmtblpy.RD5GetSet(*args)
RD5GetSet = _lfmtblpy.RD5GetSet

def RD5GetJoinSlaveSet(*args):
  return _lfmtblpy.RD5GetJoinSlaveSet(*args)
RD5GetJoinSlaveSet = _lfmtblpy.RD5GetJoinSlaveSet

def RD5GetJoinDir(*args):
  return _lfmtblpy.RD5GetJoinDir(*args)
RD5GetJoinDir = _lfmtblpy.RD5GetJoinDir

def RD5GetJoinProjectionSets(*args):
  return _lfmtblpy.RD5GetJoinProjectionSets(*args)
RD5GetJoinProjectionSets = _lfmtblpy.RD5GetJoinProjectionSets

def RD5GetSetList(*args):
  return _lfmtblpy.RD5GetSetList(*args)
RD5GetSetList = _lfmtblpy.RD5GetSetList

def RD5GetSetIDList(*args):
  return _lfmtblpy.RD5GetSetIDList(*args)
RD5GetSetIDList = _lfmtblpy.RD5GetSetIDList

def RD5AddSetReal(*args):
  return _lfmtblpy.RD5AddSetReal(*args)
RD5AddSetReal = _lfmtblpy.RD5AddSetReal

def RD5DeleteSet(*args):
  return _lfmtblpy.RD5DeleteSet(*args)
RD5DeleteSet = _lfmtblpy.RD5DeleteSet

def RD5GetCurrentSetID(*args):
  return _lfmtblpy.RD5GetCurrentSetID(*args)
RD5GetCurrentSetID = _lfmtblpy.RD5GetCurrentSetID

def RD5ChangeCurrentSetID(*args):
  return _lfmtblpy.RD5ChangeCurrentSetID(*args)
RD5ChangeCurrentSetID = _lfmtblpy.RD5ChangeCurrentSetID

def RD5SetNotReal(*args):
  return _lfmtblpy.RD5SetNotReal(*args)
RD5SetNotReal = _lfmtblpy.RD5SetNotReal

def RD5SetOpeReal(*args):
  return _lfmtblpy.RD5SetOpeReal(*args)
RD5SetOpeReal = _lfmtblpy.RD5SetOpeReal

def RD5ExtractUniqueReal(*args):
  return _lfmtblpy.RD5ExtractUniqueReal(*args)
RD5ExtractUniqueReal = _lfmtblpy.RD5ExtractUniqueReal

def RD5PutJoinSetToParent(*args):
  return _lfmtblpy.RD5PutJoinSetToParent(*args)
RD5PutJoinSetToParent = _lfmtblpy.RD5PutJoinSetToParent

def RD5ReturnSet2SlaveTable(*args):
  return _lfmtblpy.RD5ReturnSet2SlaveTable(*args)
RD5ReturnSet2SlaveTable = _lfmtblpy.RD5ReturnSet2SlaveTable

def RD5GetNFilter(*args):
  return _lfmtblpy.RD5GetNFilter(*args)
RD5GetNFilter = _lfmtblpy.RD5GetNFilter

def RD5GetFilterIDList(*args):
  return _lfmtblpy.RD5GetFilterIDList(*args)
RD5GetFilterIDList = _lfmtblpy.RD5GetFilterIDList

def RD5GetFilterWidth(*args):
  return _lfmtblpy.RD5GetFilterWidth(*args)
RD5GetFilterWidth = _lfmtblpy.RD5GetFilterWidth

def RD5GetFilterType(*args):
  return _lfmtblpy.RD5GetFilterType(*args)
RD5GetFilterType = _lfmtblpy.RD5GetFilterType

def RD5GetFilterInfo(*args):
  return _lfmtblpy.RD5GetFilterInfo(*args)
RD5GetFilterInfo = _lfmtblpy.RD5GetFilterInfo

def RD5GetJoinKeyInfo(*args):
  return _lfmtblpy.RD5GetJoinKeyInfo(*args)
RD5GetJoinKeyInfo = _lfmtblpy.RD5GetJoinKeyInfo

def RD5GetFilterAttr(*args):
  return _lfmtblpy.RD5GetFilterAttr(*args)
RD5GetFilterAttr = _lfmtblpy.RD5GetFilterAttr

def RD5GetSubsetAttr(*args):
  return _lfmtblpy.RD5GetSubsetAttr(*args)
RD5GetSubsetAttr = _lfmtblpy.RD5GetSubsetAttr

def RD5SetFilterAttr(*args):
  return _lfmtblpy.RD5SetFilterAttr(*args)
RD5SetFilterAttr = _lfmtblpy.RD5SetFilterAttr

def RD5SetSubsetAttr(*args):
  return _lfmtblpy.RD5SetSubsetAttr(*args)
RD5SetSubsetAttr = _lfmtblpy.RD5SetSubsetAttr

def RD5DeleteRealFilter(*args):
  return _lfmtblpy.RD5DeleteRealFilter(*args)
RD5DeleteRealFilter = _lfmtblpy.RD5DeleteRealFilter

def RD5MoveRealFilter(*args):
  return _lfmtblpy.RD5MoveRealFilter(*args)
RD5MoveRealFilter = _lfmtblpy.RD5MoveRealFilter

def RD5DupRealFilter(*args):
  return _lfmtblpy.RD5DupRealFilter(*args)
RD5DupRealFilter = _lfmtblpy.RD5DupRealFilter

def RD5DupRealFilterEx(*args):
  return _lfmtblpy.RD5DupRealFilterEx(*args)
RD5DupRealFilterEx = _lfmtblpy.RD5DupRealFilterEx

def RD5AppendCatalogFile(*args):
  return _lfmtblpy.RD5AppendCatalogFile(*args)
RD5AppendCatalogFile = _lfmtblpy.RD5AppendCatalogFile

def RD5AppendCatalogFileEx2(*args):
  return _lfmtblpy.RD5AppendCatalogFileEx2(*args)
RD5AppendCatalogFileEx2 = _lfmtblpy.RD5AppendCatalogFileEx2

def RD5AddCatalogFileEx2(*args):
  return _lfmtblpy.RD5AddCatalogFileEx2(*args)
RD5AddCatalogFileEx2 = _lfmtblpy.RD5AddCatalogFileEx2

def RD5AppendRealFilter2(*args):
  return _lfmtblpy.RD5AppendRealFilter2(*args)
RD5AppendRealFilter2 = _lfmtblpy.RD5AppendRealFilter2

def RD5AddRealFilter2(*args):
  return _lfmtblpy.RD5AddRealFilter2(*args)
RD5AddRealFilter2 = _lfmtblpy.RD5AddRealFilter2

def RD5AddCatalogFile(*args):
  return _lfmtblpy.RD5AddCatalogFile(*args)
RD5AddCatalogFile = _lfmtblpy.RD5AddCatalogFile

def RD5GetSlaveInfo(*args):
  return _lfmtblpy.RD5GetSlaveInfo(*args)
RD5GetSlaveInfo = _lfmtblpy.RD5GetSlaveInfo

def RD5MoveSlaveFlt2Master(*args):
  return _lfmtblpy.RD5MoveSlaveFlt2Master(*args)
RD5MoveSlaveFlt2Master = _lfmtblpy.RD5MoveSlaveFlt2Master

def RD5FindRecNoReal(*args):
  return _lfmtblpy.RD5FindRecNoReal(*args)
RD5FindRecNoReal = _lfmtblpy.RD5FindRecNoReal

def RD5OpenStrFindReal(*args):
  return _lfmtblpy.RD5OpenStrFindReal(*args)
RD5OpenStrFindReal = _lfmtblpy.RD5OpenStrFindReal

def RD5OpenStrFindRealSJIS(*args):
  return _lfmtblpy.RD5OpenStrFindRealSJIS(*args)
RD5OpenStrFindRealSJIS = _lfmtblpy.RD5OpenStrFindRealSJIS

def RD5OpenStrFindRealLocale(*args):
  return _lfmtblpy.RD5OpenStrFindRealLocale(*args)
RD5OpenStrFindRealLocale = _lfmtblpy.RD5OpenStrFindRealLocale

def RD5OpenIntFindReal(*args):
  return _lfmtblpy.RD5OpenIntFindReal(*args)
RD5OpenIntFindReal = _lfmtblpy.RD5OpenIntFindReal

def RD5OpenFloatFindReal(*args):
  return _lfmtblpy.RD5OpenFloatFindReal(*args)
RD5OpenFloatFindReal = _lfmtblpy.RD5OpenFloatFindReal

def RD5GetFindStatus(*args):
  return _lfmtblpy.RD5GetFindStatus(*args)
RD5GetFindStatus = _lfmtblpy.RD5GetFindStatus

def RD5GetNextHitReal(*args):
  return _lfmtblpy.RD5GetNextHitReal(*args)
RD5GetNextHitReal = _lfmtblpy.RD5GetNextHitReal

def RD5CloseFindReal(*args):
  return _lfmtblpy.RD5CloseFindReal(*args)
RD5CloseFindReal = _lfmtblpy.RD5CloseFindReal

def RD5AddCategoryReal(*args):
  return _lfmtblpy.RD5AddCategoryReal(*args)
RD5AddCategoryReal = _lfmtblpy.RD5AddCategoryReal

def RD5CalcReal(*args):
  return _lfmtblpy.RD5CalcReal(*args)
RD5CalcReal = _lfmtblpy.RD5CalcReal

def RD5TableCanEdit(*args):
  return _lfmtblpy.RD5TableCanEdit(*args)
RD5TableCanEdit = _lfmtblpy.RD5TableCanEdit

def RD5DeleteRealRows(*args):
  return _lfmtblpy.RD5DeleteRealRows(*args)
RD5DeleteRealRows = _lfmtblpy.RD5DeleteRealRows

def RD5DeleteRealRowsEx(*args):
  return _lfmtblpy.RD5DeleteRealRowsEx(*args)
RD5DeleteRealRowsEx = _lfmtblpy.RD5DeleteRealRowsEx

def RD5InsertRealRows(*args):
  return _lfmtblpy.RD5InsertRealRows(*args)
RD5InsertRealRows = _lfmtblpy.RD5InsertRealRows

def RD5OverwriteRealEx(*args):
  return _lfmtblpy.RD5OverwriteRealEx(*args)
RD5OverwriteRealEx = _lfmtblpy.RD5OverwriteRealEx

def RD5FillRealEx(*args):
  return _lfmtblpy.RD5FillRealEx(*args)
RD5FillRealEx = _lfmtblpy.RD5FillRealEx

def RD5GetData1(*args):
  return _lfmtblpy.RD5GetData1(*args)
RD5GetData1 = _lfmtblpy.RD5GetData1

def RD5GetData1M(*args):
  return _lfmtblpy.RD5GetData1M(*args)
RD5GetData1M = _lfmtblpy.RD5GetData1M

def RD5GetRowNo(*args):
  return _lfmtblpy.RD5GetRowNo(*args)
RD5GetRowNo = _lfmtblpy.RD5GetRowNo

def RD5GetRowNo1(*args):
  return _lfmtblpy.RD5GetRowNo1(*args)
RD5GetRowNo1 = _lfmtblpy.RD5GetRowNo1

def RD5GetRowNo1M(*args):
  return _lfmtblpy.RD5GetRowNo1M(*args)
RD5GetRowNo1M = _lfmtblpy.RD5GetRowNo1M

def RD5SearchByDispRowNoReal(*args):
  return _lfmtblpy.RD5SearchByDispRowNoReal(*args)
RD5SearchByDispRowNoReal = _lfmtblpy.RD5SearchByDispRowNoReal

def RD5SearchByRowNo(*args):
  return _lfmtblpy.RD5SearchByRowNo(*args)
RD5SearchByRowNo = _lfmtblpy.RD5SearchByRowNo

def RD5SearchByField(*args):
  return _lfmtblpy.RD5SearchByField(*args)
RD5SearchByField = _lfmtblpy.RD5SearchByField

def RD5SearchByFieldSJIS(*args):
  return _lfmtblpy.RD5SearchByFieldSJIS(*args)
RD5SearchByFieldSJIS = _lfmtblpy.RD5SearchByFieldSJIS

def RD5SearchByFieldLocale(*args):
  return _lfmtblpy.RD5SearchByFieldLocale(*args)
RD5SearchByFieldLocale = _lfmtblpy.RD5SearchByFieldLocale

def RD5SearchByFieldWildCard(*args):
  return _lfmtblpy.RD5SearchByFieldWildCard(*args)
RD5SearchByFieldWildCard = _lfmtblpy.RD5SearchByFieldWildCard

def RD5SearchByText(*args):
  return _lfmtblpy.RD5SearchByText(*args)
RD5SearchByText = _lfmtblpy.RD5SearchByText

def RD5SearchByTextSJIS(*args):
  return _lfmtblpy.RD5SearchByTextSJIS(*args)
RD5SearchByTextSJIS = _lfmtblpy.RD5SearchByTextSJIS

def RD5SearchByTextLocale(*args):
  return _lfmtblpy.RD5SearchByTextLocale(*args)
RD5SearchByTextLocale = _lfmtblpy.RD5SearchByTextLocale

def RD5SortByField(*args):
  return _lfmtblpy.RD5SortByField(*args)
RD5SortByField = _lfmtblpy.RD5SortByField

def RD5SortByRowNo(*args):
  return _lfmtblpy.RD5SortByRowNo(*args)
RD5SortByRowNo = _lfmtblpy.RD5SortByRowNo

def RD5OpenDetailInfo(*args):
  return _lfmtblpy.RD5OpenDetailInfo(*args)
RD5OpenDetailInfo = _lfmtblpy.RD5OpenDetailInfo

def RD5GetDetailValue(*args):
  return _lfmtblpy.RD5GetDetailValue(*args)
RD5GetDetailValue = _lfmtblpy.RD5GetDetailValue

def RD5GetDetailCount(*args):
  return _lfmtblpy.RD5GetDetailCount(*args)
RD5GetDetailCount = _lfmtblpy.RD5GetDetailCount

def RD5CloseDetailInfo(*args):
  return _lfmtblpy.RD5CloseDetailInfo(*args)
RD5CloseDetailInfo = _lfmtblpy.RD5CloseDetailInfo

def RD5NonCubeSum(*args):
  return _lfmtblpy.RD5NonCubeSum(*args)
RD5NonCubeSum = _lfmtblpy.RD5NonCubeSum

def RD5GetTableIDFromName(*args):
  return _lfmtblpy.RD5GetTableIDFromName(*args)
RD5GetTableIDFromName = _lfmtblpy.RD5GetTableIDFromName

def RD5GetFilterIDFromName(*args):
  return _lfmtblpy.RD5GetFilterIDFromName(*args)
RD5GetFilterIDFromName = _lfmtblpy.RD5GetFilterIDFromName

def RD5GetFilterIDFromName2(*args):
  return _lfmtblpy.RD5GetFilterIDFromName2(*args)
RD5GetFilterIDFromName2 = _lfmtblpy.RD5GetFilterIDFromName2

def RD5SetTableName(*args):
  return _lfmtblpy.RD5SetTableName(*args)
RD5SetTableName = _lfmtblpy.RD5SetTableName

def RD5SetFilterName(*args):
  return _lfmtblpy.RD5SetFilterName(*args)
RD5SetFilterName = _lfmtblpy.RD5SetFilterName

def RD5SetSetName(*args):
  return _lfmtblpy.RD5SetSetName(*args)
RD5SetSetName = _lfmtblpy.RD5SetSetName

def RD5GetFilterName(*args):
  return _lfmtblpy.RD5GetFilterName(*args)
RD5GetFilterName = _lfmtblpy.RD5GetFilterName

def RD5GetSetName(*args):
  return _lfmtblpy.RD5GetSetName(*args)
RD5GetSetName = _lfmtblpy.RD5GetSetName

def RD5SetTailSpaceFlag(*args):
  return _lfmtblpy.RD5SetTailSpaceFlag(*args)
RD5SetTailSpaceFlag = _lfmtblpy.RD5SetTailSpaceFlag

def RD5GetServerIPAddress(*args):
  return _lfmtblpy.RD5GetServerIPAddress(*args)
RD5GetServerIPAddress = _lfmtblpy.RD5GetServerIPAddress

def RD5GetEnvironment(*args):
  return _lfmtblpy.RD5GetEnvironment(*args)
RD5GetEnvironment = _lfmtblpy.RD5GetEnvironment

def RD5SetDBCharCode(*args):
  return _lfmtblpy.RD5SetDBCharCode(*args)
RD5SetDBCharCode = _lfmtblpy.RD5SetDBCharCode

def RD5GetD5DFileInfo(*args):
  return _lfmtblpy.RD5GetD5DFileInfo(*args)
RD5GetD5DFileInfo = _lfmtblpy.RD5GetD5DFileInfo

def RD5GetD5TFileInfo(*args):
  return _lfmtblpy.RD5GetD5TFileInfo(*args)
RD5GetD5TFileInfo = _lfmtblpy.RD5GetD5TFileInfo

def RD5BrowserGetCurrentDirectory(*args):
  return _lfmtblpy.RD5BrowserGetCurrentDirectory(*args)
RD5BrowserGetCurrentDirectory = _lfmtblpy.RD5BrowserGetCurrentDirectory

def RD5BrowserSetCurrentDirectory(*args):
  return _lfmtblpy.RD5BrowserSetCurrentDirectory(*args)
RD5BrowserSetCurrentDirectory = _lfmtblpy.RD5BrowserSetCurrentDirectory

def RD5BrowserGetFileSize(*args):
  return _lfmtblpy.RD5BrowserGetFileSize(*args)
RD5BrowserGetFileSize = _lfmtblpy.RD5BrowserGetFileSize

def RD5BrowserGetFileList(*args):
  return _lfmtblpy.RD5BrowserGetFileList(*args)
RD5BrowserGetFileList = _lfmtblpy.RD5BrowserGetFileList

def RD5BrowserGetFileEx(*args):
  return _lfmtblpy.RD5BrowserGetFileEx(*args)
RD5BrowserGetFileEx = _lfmtblpy.RD5BrowserGetFileEx

def RD5BrowserGetFileEx64(*args):
  return _lfmtblpy.RD5BrowserGetFileEx64(*args)
RD5BrowserGetFileEx64 = _lfmtblpy.RD5BrowserGetFileEx64

def RD5BrowserGetFile(*args):
  return _lfmtblpy.RD5BrowserGetFile(*args)
RD5BrowserGetFile = _lfmtblpy.RD5BrowserGetFile

def RD5BrowserGetFile64(*args):
  return _lfmtblpy.RD5BrowserGetFile64(*args)
RD5BrowserGetFile64 = _lfmtblpy.RD5BrowserGetFile64

def RD5BrowserPutFile(*args):
  return _lfmtblpy.RD5BrowserPutFile(*args)
RD5BrowserPutFile = _lfmtblpy.RD5BrowserPutFile

def RD5BrowserDelFile(*args):
  return _lfmtblpy.RD5BrowserDelFile(*args)
RD5BrowserDelFile = _lfmtblpy.RD5BrowserDelFile

def RD5BrowserMakeDirectory(*args):
  return _lfmtblpy.RD5BrowserMakeDirectory(*args)
RD5BrowserMakeDirectory = _lfmtblpy.RD5BrowserMakeDirectory

def RD5BrowserDelDirectory(*args):
  return _lfmtblpy.RD5BrowserDelDirectory(*args)
RD5BrowserDelDirectory = _lfmtblpy.RD5BrowserDelDirectory

def RD5BrowserMove(*args):
  return _lfmtblpy.RD5BrowserMove(*args)
RD5BrowserMove = _lfmtblpy.RD5BrowserMove

def RD5BrowserPutFileEx(*args):
  return _lfmtblpy.RD5BrowserPutFileEx(*args)
RD5BrowserPutFileEx = _lfmtblpy.RD5BrowserPutFileEx

def RD5ExportAsCSVwithF(*args):
  return _lfmtblpy.RD5ExportAsCSVwithF(*args)
RD5ExportAsCSVwithF = _lfmtblpy.RD5ExportAsCSVwithF

def RD5ExportAsTABwithF(*args):
  return _lfmtblpy.RD5ExportAsTABwithF(*args)
RD5ExportAsTABwithF = _lfmtblpy.RD5ExportAsTABwithF

def RD5SaveAsCatalogwithF(*args):
  return _lfmtblpy.RD5SaveAsCatalogwithF(*args)
RD5SaveAsCatalogwithF = _lfmtblpy.RD5SaveAsCatalogwithF

def RD5SaveAsCatalogwithFEx(*args):
  return _lfmtblpy.RD5SaveAsCatalogwithFEx(*args)
RD5SaveAsCatalogwithFEx = _lfmtblpy.RD5SaveAsCatalogwithFEx

def RD5LoadDBFromSharedMemory():
  return _lfmtblpy.RD5LoadDBFromSharedMemory()
RD5LoadDBFromSharedMemory = _lfmtblpy.RD5LoadDBFromSharedMemory

def RD5UnLoadSharedMemoryDB():
  return _lfmtblpy.RD5UnLoadSharedMemoryDB()
RD5UnLoadSharedMemoryDB = _lfmtblpy.RD5UnLoadSharedMemoryDB

def RD5UnMapSharedMemory():
  return _lfmtblpy.RD5UnMapSharedMemory()
RD5UnMapSharedMemory = _lfmtblpy.RD5UnMapSharedMemory

def RD5CreateSharedMemoryDB(*args):
  return _lfmtblpy.RD5CreateSharedMemoryDB(*args)
RD5CreateSharedMemoryDB = _lfmtblpy.RD5CreateSharedMemoryDB

def RD5ReleaseSharedMemoryArea():
  return _lfmtblpy.RD5ReleaseSharedMemoryArea()
RD5ReleaseSharedMemoryArea = _lfmtblpy.RD5ReleaseSharedMemoryArea

def RD5GetSystemMemInfo(*args):
  return _lfmtblpy.RD5GetSystemMemInfo(*args)
RD5GetSystemMemInfo = _lfmtblpy.RD5GetSystemMemInfo

def RD5IsSharedMemoryTable(*args):
  return _lfmtblpy.RD5IsSharedMemoryTable(*args)
RD5IsSharedMemoryTable = _lfmtblpy.RD5IsSharedMemoryTable

def RD5GetAllFilterInfo(*args):
  return _lfmtblpy.RD5GetAllFilterInfo(*args)
RD5GetAllFilterInfo = _lfmtblpy.RD5GetAllFilterInfo

def RD5GetTotalMemorySize():
  return _lfmtblpy.RD5GetTotalMemorySize()
RD5GetTotalMemorySize = _lfmtblpy.RD5GetTotalMemorySize

def RD5GetTotalMemorySizeWithShared():
  return _lfmtblpy.RD5GetTotalMemorySizeWithShared()
RD5GetTotalMemorySizeWithShared = _lfmtblpy.RD5GetTotalMemorySizeWithShared

def RD5GetTableMemorySize(*args):
  return _lfmtblpy.RD5GetTableMemorySize(*args)
RD5GetTableMemorySize = _lfmtblpy.RD5GetTableMemorySize

def RD5GetFilterMemorySize(*args):
  return _lfmtblpy.RD5GetFilterMemorySize(*args)
RD5GetFilterMemorySize = _lfmtblpy.RD5GetFilterMemorySize

def RD5GetSetMemorySize(*args):
  return _lfmtblpy.RD5GetSetMemorySize(*args)
RD5GetSetMemorySize = _lfmtblpy.RD5GetSetMemorySize

def RD5Shutdown():
  return _lfmtblpy.RD5Shutdown()
RD5Shutdown = _lfmtblpy.RD5Shutdown

def RD5HighSpeedSearchSetMark(*args):
  return _lfmtblpy.RD5HighSpeedSearchSetMark(*args)
RD5HighSpeedSearchSetMark = _lfmtblpy.RD5HighSpeedSearchSetMark

def RD5HighSpeedSearchHasMark(*args):
  return _lfmtblpy.RD5HighSpeedSearchHasMark(*args)
RD5HighSpeedSearchHasMark = _lfmtblpy.RD5HighSpeedSearchHasMark

def RD5HighSpeedSearchEnable(*args):
  return _lfmtblpy.RD5HighSpeedSearchEnable(*args)
RD5HighSpeedSearchEnable = _lfmtblpy.RD5HighSpeedSearchEnable

def RD5HighSpeedSearchIsEnabled(*args):
  return _lfmtblpy.RD5HighSpeedSearchIsEnabled(*args)
RD5HighSpeedSearchIsEnabled = _lfmtblpy.RD5HighSpeedSearchIsEnabled

def RD5SetPassword(*args):
  return _lfmtblpy.RD5SetPassword(*args)
RD5SetPassword = _lfmtblpy.RD5SetPassword

def RD5GetSerial(*args):
  return _lfmtblpy.RD5GetSerial(*args)
RD5GetSerial = _lfmtblpy.RD5GetSerial

def RD5GetLimitRowSize():
  return _lfmtblpy.RD5GetLimitRowSize()
RD5GetLimitRowSize = _lfmtblpy.RD5GetLimitRowSize

def RD5GetLimitMemSize():
  return _lfmtblpy.RD5GetLimitMemSize()
RD5GetLimitMemSize = _lfmtblpy.RD5GetLimitMemSize

def RD5GetLimitCPUSize():
  return _lfmtblpy.RD5GetLimitCPUSize()
RD5GetLimitCPUSize = _lfmtblpy.RD5GetLimitCPUSize

def RD5GetLicenseInfo(*args):
  return _lfmtblpy.RD5GetLicenseInfo(*args)
RD5GetLicenseInfo = _lfmtblpy.RD5GetLicenseInfo

def RD5GetNumericInfo(*args):
  return _lfmtblpy.RD5GetNumericInfo(*args)
RD5GetNumericInfo = _lfmtblpy.RD5GetNumericInfo

def RD5SetNumericInfo(*args):
  return _lfmtblpy.RD5SetNumericInfo(*args)
RD5SetNumericInfo = _lfmtblpy.RD5SetNumericInfo

def RD5OpenNumericFindReal(*args):
  return _lfmtblpy.RD5OpenNumericFindReal(*args)
RD5OpenNumericFindReal = _lfmtblpy.RD5OpenNumericFindReal

def RD5AddRealFilter2Numeric(*args):
  return _lfmtblpy.RD5AddRealFilter2Numeric(*args)
RD5AddRealFilter2Numeric = _lfmtblpy.RD5AddRealFilter2Numeric

def RD5DupRealFilterExNumeric(*args):
  return _lfmtblpy.RD5DupRealFilterExNumeric(*args)
RD5DupRealFilterExNumeric = _lfmtblpy.RD5DupRealFilterExNumeric

def RD5IntegratedSortByField(*args):
  return _lfmtblpy.RD5IntegratedSortByField(*args)
RD5IntegratedSortByField = _lfmtblpy.RD5IntegratedSortByField

def RD5SaveDBAsOldVer(*args):
  return _lfmtblpy.RD5SaveDBAsOldVer(*args)
RD5SaveDBAsOldVer = _lfmtblpy.RD5SaveDBAsOldVer

def RD5SaveRealTableOldVer(*args):
  return _lfmtblpy.RD5SaveRealTableOldVer(*args)
RD5SaveRealTableOldVer = _lfmtblpy.RD5SaveRealTableOldVer

def RD5SaveRealTableAsOldVer(*args):
  return _lfmtblpy.RD5SaveRealTableAsOldVer(*args)
RD5SaveRealTableAsOldVer = _lfmtblpy.RD5SaveRealTableAsOldVer

def RD5GetVersionR1(*args):
  return _lfmtblpy.RD5GetVersionR1(*args)
RD5GetVersionR1 = _lfmtblpy.RD5GetVersionR1

def RD5GetCopyRightR1():
  return _lfmtblpy.RD5GetCopyRightR1()
RD5GetCopyRightR1 = _lfmtblpy.RD5GetCopyRightR1

def RD5GetDBPathR1():
  return _lfmtblpy.RD5GetDBPathR1()
RD5GetDBPathR1 = _lfmtblpy.RD5GetDBPathR1

def RD5GetDBNameR1():
  return _lfmtblpy.RD5GetDBNameR1()
RD5GetDBNameR1 = _lfmtblpy.RD5GetDBNameR1

def RD5GenerateTableNameR1(*args):
  return _lfmtblpy.RD5GenerateTableNameR1(*args)
RD5GenerateTableNameR1 = _lfmtblpy.RD5GenerateTableNameR1

def RD5GenTableNameR1(*args):
  return _lfmtblpy.RD5GenTableNameR1(*args)
RD5GenTableNameR1 = _lfmtblpy.RD5GenTableNameR1

def RD5GetTableNameR1(*args):
  return _lfmtblpy.RD5GetTableNameR1(*args)
RD5GetTableNameR1 = _lfmtblpy.RD5GetTableNameR1

def RD5SearchByFieldStrR1(*args):
  return _lfmtblpy.RD5SearchByFieldStrR1(*args)
RD5SearchByFieldStrR1 = _lfmtblpy.RD5SearchByFieldStrR1

def RD5SearchByFieldIntR1(*args):
  return _lfmtblpy.RD5SearchByFieldIntR1(*args)
RD5SearchByFieldIntR1 = _lfmtblpy.RD5SearchByFieldIntR1

def RD5SearchByFieldDblR1(*args):
  return _lfmtblpy.RD5SearchByFieldDblR1(*args)
RD5SearchByFieldDblR1 = _lfmtblpy.RD5SearchByFieldDblR1

def RD5SearchByFieldNumericR1(*args):
  return _lfmtblpy.RD5SearchByFieldNumericR1(*args)
RD5SearchByFieldNumericR1 = _lfmtblpy.RD5SearchByFieldNumericR1

def RD5SearchByFieldSJISR1(*args):
  return _lfmtblpy.RD5SearchByFieldSJISR1(*args)
RD5SearchByFieldSJISR1 = _lfmtblpy.RD5SearchByFieldSJISR1

def RD5SearchByFieldLocaleR1(*args):
  return _lfmtblpy.RD5SearchByFieldLocaleR1(*args)
RD5SearchByFieldLocaleR1 = _lfmtblpy.RD5SearchByFieldLocaleR1

def RD5GetDataIntR1(*args):
  return _lfmtblpy.RD5GetDataIntR1(*args)
RD5GetDataIntR1 = _lfmtblpy.RD5GetDataIntR1

def RD5GetDataDblR1(*args):
  return _lfmtblpy.RD5GetDataDblR1(*args)
RD5GetDataDblR1 = _lfmtblpy.RD5GetDataDblR1

def RD5GetDataStrR1(*args):
  return _lfmtblpy.RD5GetDataStrR1(*args)
RD5GetDataStrR1 = _lfmtblpy.RD5GetDataStrR1

def RD5GetDataNumericR1(*args):
  return _lfmtblpy.RD5GetDataNumericR1(*args)
RD5GetDataNumericR1 = _lfmtblpy.RD5GetDataNumericR1

def RD5GetNumericInfoR1(*args):
  return _lfmtblpy.RD5GetNumericInfoR1(*args)
RD5GetNumericInfoR1 = _lfmtblpy.RD5GetNumericInfoR1

def RD5GetData1IntR1(*args):
  return _lfmtblpy.RD5GetData1IntR1(*args)
RD5GetData1IntR1 = _lfmtblpy.RD5GetData1IntR1

def RD5GetData1DblR1(*args):
  return _lfmtblpy.RD5GetData1DblR1(*args)
RD5GetData1DblR1 = _lfmtblpy.RD5GetData1DblR1

def RD5GetData1StrR1(*args):
  return _lfmtblpy.RD5GetData1StrR1(*args)
RD5GetData1StrR1 = _lfmtblpy.RD5GetData1StrR1

def RD5GetData1NumericR1(*args):
  return _lfmtblpy.RD5GetData1NumericR1(*args)
RD5GetData1NumericR1 = _lfmtblpy.RD5GetData1NumericR1

def RD5GetFilterNameR1(*args):
  return _lfmtblpy.RD5GetFilterNameR1(*args)
RD5GetFilterNameR1 = _lfmtblpy.RD5GetFilterNameR1

def RD5GetSerialR1():
  return _lfmtblpy.RD5GetSerialR1()
RD5GetSerialR1 = _lfmtblpy.RD5GetSerialR1

def RD5CategoryReadR1(*args):
  return _lfmtblpy.RD5CategoryReadR1(*args)
RD5CategoryReadR1 = _lfmtblpy.RD5CategoryReadR1

def RD5OverwriteRealExIntR1(*args):
  return _lfmtblpy.RD5OverwriteRealExIntR1(*args)
RD5OverwriteRealExIntR1 = _lfmtblpy.RD5OverwriteRealExIntR1

def RD5OverwriteRealExDblR1(*args):
  return _lfmtblpy.RD5OverwriteRealExDblR1(*args)
RD5OverwriteRealExDblR1 = _lfmtblpy.RD5OverwriteRealExDblR1

def RD5OverwriteRealExNumericR1(*args):
  return _lfmtblpy.RD5OverwriteRealExNumericR1(*args)
RD5OverwriteRealExNumericR1 = _lfmtblpy.RD5OverwriteRealExNumericR1

def RD5OverwriteRealExStrR1(*args):
  return _lfmtblpy.RD5OverwriteRealExStrR1(*args)
RD5OverwriteRealExStrR1 = _lfmtblpy.RD5OverwriteRealExStrR1

def RD5FillRealExIntR1(*args):
  return _lfmtblpy.RD5FillRealExIntR1(*args)
RD5FillRealExIntR1 = _lfmtblpy.RD5FillRealExIntR1

def RD5FillRealExDblR1(*args):
  return _lfmtblpy.RD5FillRealExDblR1(*args)
RD5FillRealExDblR1 = _lfmtblpy.RD5FillRealExDblR1

def RD5FillRealExNumericR1(*args):
  return _lfmtblpy.RD5FillRealExNumericR1(*args)
RD5FillRealExNumericR1 = _lfmtblpy.RD5FillRealExNumericR1

def RD5FillRealExStrR1(*args):
  return _lfmtblpy.RD5FillRealExStrR1(*args)
RD5FillRealExStrR1 = _lfmtblpy.RD5FillRealExStrR1

def RD5GetData1Cnv2StrR1(*args):
  return _lfmtblpy.RD5GetData1Cnv2StrR1(*args)
RD5GetData1Cnv2StrR1 = _lfmtblpy.RD5GetData1Cnv2StrR1

def RD5Double2DateStrR1(*args):
  return _lfmtblpy.RD5Double2DateStrR1(*args)
RD5Double2DateStrR1 = _lfmtblpy.RD5Double2DateStrR1

def RD5Double2TimeStrR1(*args):
  return _lfmtblpy.RD5Double2TimeStrR1(*args)
RD5Double2TimeStrR1 = _lfmtblpy.RD5Double2TimeStrR1

def RD5Double2DateTimeStrR1(*args):
  return _lfmtblpy.RD5Double2DateTimeStrR1(*args)
RD5Double2DateTimeStrR1 = _lfmtblpy.RD5Double2DateTimeStrR1

def RD5NumericNum2StrR1(*args):
  return _lfmtblpy.RD5NumericNum2StrR1(*args)
RD5NumericNum2StrR1 = _lfmtblpy.RD5NumericNum2StrR1

def RD5Str2DateR1(*args):
  return _lfmtblpy.RD5Str2DateR1(*args)
RD5Str2DateR1 = _lfmtblpy.RD5Str2DateR1

def RD5Str2TimeR1(*args):
  return _lfmtblpy.RD5Str2TimeR1(*args)
RD5Str2TimeR1 = _lfmtblpy.RD5Str2TimeR1

def RD5Str2DateTimeR1(*args):
  return _lfmtblpy.RD5Str2DateTimeR1(*args)
RD5Str2DateTimeR1 = _lfmtblpy.RD5Str2DateTimeR1

def RD5GetData1MIntR1(*args):
  return _lfmtblpy.RD5GetData1MIntR1(*args)
RD5GetData1MIntR1 = _lfmtblpy.RD5GetData1MIntR1

def RD5GetData1MDblR1(*args):
  return _lfmtblpy.RD5GetData1MDblR1(*args)
RD5GetData1MDblR1 = _lfmtblpy.RD5GetData1MDblR1

def RD5GetData1MNumericR1(*args):
  return _lfmtblpy.RD5GetData1MNumericR1(*args)
RD5GetData1MNumericR1 = _lfmtblpy.RD5GetData1MNumericR1

def RD5GetData1MStrR1(*args):
  return _lfmtblpy.RD5GetData1MStrR1(*args)
RD5GetData1MStrR1 = _lfmtblpy.RD5GetData1MStrR1

def RD5GetSetNameR1(*args):
  return _lfmtblpy.RD5GetSetNameR1(*args)
RD5GetSetNameR1 = _lfmtblpy.RD5GetSetNameR1

def RD5GetJoinInfoR1(*args):
  return _lfmtblpy.RD5GetJoinInfoR1(*args)
RD5GetJoinInfoR1 = _lfmtblpy.RD5GetJoinInfoR1

def RD5GetJoinInfoExR1(*args):
  return _lfmtblpy.RD5GetJoinInfoExR1(*args)
RD5GetJoinInfoExR1 = _lfmtblpy.RD5GetJoinInfoExR1

def RD5Connect2LFMServer(*args):
  return _lfmtblpy.RD5Connect2LFMServer(*args)
RD5Connect2LFMServer = _lfmtblpy.RD5Connect2LFMServer

def RD5DisconnectFromLFMServer():
  return _lfmtblpy.RD5DisconnectFromLFMServer()
RD5DisconnectFromLFMServer = _lfmtblpy.RD5DisconnectFromLFMServer

def RD5GetNamingServiceIdentity():
  return _lfmtblpy.RD5GetNamingServiceIdentity()
RD5GetNamingServiceIdentity = _lfmtblpy.RD5GetNamingServiceIdentity


